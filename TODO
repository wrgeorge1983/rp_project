# CTRL-Enter to toggle box
# ALT-S to start
# ALT-D to Done
# ALT-C to Cancel
# CTRL-SHIFT-A to archive all cancelled/done items
Repo Health:
  ☐ Add a README
  ☐ Add a LICENSE file?

Deployment Workflow:
  ☐ topology_config parser more work
  ☐ null

Other Ideas:
  ☐ cli `State` object:  override get_attr (or whatever) to have failed gets always return None?
  ☐ Decorator `@strict` that determines if a function/method can swallow & log a certain type of exception vs. hard failure

Core Functionality - Transport Forwarding Plane (L1/L2):
  ☐ Leak any information needed from topology file to router config as early as possible 
    To preserve separation between the layers as much as possible
    Best place to do this is probably in `utils.get_configs_by_hostname()`
  
Core Functionality - Forwarding Plane Processing Pipeline?:
  ☐ Need to accept packets/frames/etc at one layer and process them through subsequent layers
    ☐ L3
      ☐ just enough IP to keep track of source/dest addresses, etc. @today @started(18-12-02 17:21)
        At layer 3, we can't just blindly accept an egress interface as-specified  We have to make sure it makes sense.
        ☐ Destination: @today @today @today 
          3 today tags means I *THINK* this is implemented????
          ☐ FIB lookup must match specified interface if any
            Occurs in `ForwardingPlane.l2_encap()`
          ☐ for link-local broadcast FIB lookup is the same, but we specify `dst_mac: 'FF:FF:FF:FF:FF:FF'`
          ☐ for reserved BC/MC addresses we must specify interface
        ☐ unicast @started(18-12-02 17:21)
        ☐ broadcast @started(18-12-02 17:21)
        ☐ multicast @started(18-12-02 17:21)
  ☐ Define listeners at different layers

Core Functionality - Control Plane Layer 3/4:
  ☐ Define testing cli commands
  ☐ egress_interface -> header fields 
  ☐ just enough tcp/udp to model a connection (2 unidirectional flows)
    ☐ random_high ports for tcp/udp
    ☐ connection state tracking
      ☐ New sessions outbound
      ☐ New sessions inbound
  ☐ just enough IP to keep track of source/dest addresses, etc. @today
    ☐ unicast
    ☐ broadcast
    ☐ multicast

Core Functionality - Control Plane:
  ☐ Basic receive methods @today 
    ☐ Based on interface address, etc
    ☐ validation, difference between unicast/multicat/etc
  ☐ Basic send methods
    ☐ send() for well-formed messages
  ☐ RIB (Routing Information Base - nodes understanding of how to get places)
    ☐ RIB-Manager
      ☐ Intelligently dedupe events, handle null-ops sanely
      ☐ Manage pool of candidate routes
        ☐ Accept routes into pool (on event from protocols)
        ☐ Remove routes from pool (on event from protocols)
        ☐ Select routes for admission to RIB 
          ☐ admin distance
          ☐ filter on interface status (maybe?  probably?)
      ☐ Manage RIB itself
        ☐ Add selected routes
        ☐ rescind de-selected routes
    ☐ Lookups
    
Core Functionality - Protocols - Mock Protocol v1.5: @today
  ☐ Reimplement v1.0 on Forwarding Plane / Control Plane as appropriate

Core Functionality - Protocols - Mock Protocol v2:
  ☐ Same as v1 but implemented at Layer 3
  ☐ Multicast???????
  ☐ or link-local broadcast????

Core Functionality - Protocols - RIP: 
  ☐ RIPv2
  ☐ RIPv1 ????

Core Functionality - Management Plane: @low
  First iteration is the deployment workflow
  Further iteration is low priority until lack of mgmt plane is painful
  ☐ REST API 
    ☐ http?
    ☐ via message bus?  maybe? 
      ☐ dedicated queue for that purpose
        including associate logical interface?
  ☐ CLI dependant upon REST API 
  ☐ null

Archive:
  ✔ Essential understanding of interfaces @done(18-12-02 10:12) @project(Core Functionality - Control Plane)
  ✔ send_text @done(18-12-02 10:12) @project(Core Functionality - Control Plane)
  ✔ L2 "send" method @done(18-12-02 10:11) @project(Core Functionality - Forwarding Plane Processing Pipeline?)
  ✔ Define generic listener that can use patterns to accept/reject messages before handing off @done(18-12-02 07:32) @project(Core Functionality - Forwarding Plane Processing Pipeline?)
  ✔ `listen` @done(18-12-02 10:10) @project(Core Functionality - Control Plane Layer 3/4)
  ✔ `pulsar` @done(18-12-02 10:10) @project(Core Functionality - Control Plane Layer 3/4)
  ✔ Test with "pulsar" that emits messages every n seconds @done(18-12-02 09:29) @project(Core Functionality - Forwarding Plane Processing Pipeline?)
  ✔ In order to do this, we need to implement something like a `send()` method on the Control Plane itself @done(18-12-02 09:29) @project(Core Functionality - Forwarding Plane Processing Pipeline?)
  ✔ Specifically `config_instances_from_state()` @done(18-12-02 06:14) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✔ FP should really own the `TransportInstanceCollection` object, not the CP @done(18-12-02 06:14) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✔ properly handle config file IO in async code @done(18-12-02 05:59) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✔ stop using click's file objects @done(18-12-02 05:59) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
    still use click's path objects though
  ✔ First pass @done(18-12-02 05:13) @project(Core Functionality - Logical Forwarding Plane (L2/L3))
  ✔ Further implementation once we've got static routes implemented @done(18-12-02 05:13) @project(Core Functionality - Logical Forwarding Plane (L2/L3))
  ✔ Add routes from config @done(18-12-02 05:13) @project(Core Functionality - Protocols - STATIC)
  ✘ rescind routes via config (maybe?) @cancelled(18-12-02 05:13) @project(Core Functionality - Protocols - STATIC)
  ✔ Handle connected routes @done(18-12-01 15:08) @project(Core Functionality - Protocols - STATIC)
  ✔ Configure logical interfaces from configuration file @done(18-12-01 15:00) @project(Core Functionality - Logical Forwarding Plane (L2/L3))
  ✔ Define class for interfaces??? or just datastructure? @done(18-12-01 15:00) @project(Core Functionality - Logical Forwarding Plane (L2/L3))
  ✔ FIB - THIS IS THE NEXT THING I NEED TO WORK ON @done(18-12-01 15:00) @project(Core Functionality - Logical Forwarding Plane (L2/L3))
  ✔ Simple manager class @done(18-12-01 15:00) @project(Core Functionality - Logical Forwarding Plane (L2/L3))
  ✔ Address -> egress_interface @done(18-12-01 15:00) @project(Core Functionality - Logical Forwarding Plane (L2/L3))
  ✔ Recursive lookups @done(18-12-02 05:13) @project(Core Functionality - Logical Forwarding Plane (L2/L3))
  ✔ Select transport instances @done(18-11-30 01:55) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✔ Separate FP and CP configuration tasks @done(18-12-02 06:14) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✔ Configure Transports @done(18-11-30 01:52) @project(Core Functionality - Transport Forwarding Plane (L1/L2))
  ✔ Initial usage of asyncio @done(18-11-30 01:52) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✔ Milestone 3 @done(18-11-30 01:49) @project(Test Functionality - Mock Protocool)
  ✔ Remove sleeper context manager, because, why the hell do you need that inside of an existing event loop @done(18-11-29 23:26) @project(Test Functionality - Mock Protocool)
  ✔ Implement Actor as Class, not functions sharing global state @done(18-11-30 00:04) @project(Test Functionality - Mock Protocool)
  ✘ Rebase `rmq_transport` on async implementation of `TransportInstance` @cancelled(18-11-30 00:47) @project(Test Functionality - Mock Protocool)
  ✔ test on 3.7? @done(18-11-30 01:49) @project(Test Functionality - Mock Protocool)
  ✔ 1.0 Spec complete @done(18-11-30 01:49) @project(Test Functionality - Mock Protocool)
  ✔ Milestone 2 @done(18-11-27 23:10) @project(Test Functionality - Mock Protocool)
  ✔ which interface? @done(18-11-27 22:49) @project(Test Functionality - Mock Protocool)
  ✔ callback can reference the TransportInstanceCollection @done(18-11-27 22:49) @project(Test Functionality - Mock Protocool)
  ✔ how to timer? @done(18-11-27 22:49) @project(Test Functionality - Mock Protocool)
  ✔ asyncio context manager???? @done(18-11-27 23:09) @project(Test Functionality - Mock Protocool)
  ✔ Milestone 1 @done(18-11-26 18:39) @project(Test Functionality - Mock Protocool)
  ✔ CLI hooks @done(18-11-26 11:47) @project(Test Functionality - Mock Protocool)
  ✔ re-implement rmq_transport based on `aio_pika` @done(18-11-26 11:47) @project(Test Functionality - Mock Protocool)
  ✔ initiator @done(18-11-26 15:51) @project(Test Functionality - Mock Protocool)
  ✔ actor @done(18-11-26 18:39) @project(Test Functionality - Mock Protocool)
  ✔ Monitor and log @done(18-11-26 15:52) @project(Test Functionality - Mock Protocool)
  ✔ discard messages from this interface @done(18-11-26 18:34) @project(Test Functionality - Mock Protocool)
  ✔ topology_config parser first pass @done(18-11-24 17:49) @project(Deployment Workflow)
  ✔ Create transport instance class @done(18-11-24 14:53) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✔ Migrate test RMQ functions to use TransportInstance class @done(18-11-24 17:47) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✔ use enough of the configuration to define which instances get created @done(18-11-24 17:47) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✔ Add concept of networks to test rmq functions @done(18-11-24 17:47) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✘ include sane / consistent defaults @cancelled(18-11-24 17:48) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✔ map logical interfaces to exchanges @done(18-11-24 17:48) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
