# CTRL-Enter to toggle box
# ALT-S to start
# ALT-D to Done
# ALT-C to Cancel
# CTRL-SHIFT-A to archive all cancelled/done items
Repo Health:
  ☐ Add a README
  ☐ Add a LICENSE file?

Deployment Workflow:
  ☐ topology_config parser more work
  ☐ null

Test Functionality - Mock Protocool:
  ☐ Milestone 3
    ☐ Rebase `rmq_transport` on async implementation of `TransportInstance`
      ☐ test on 3.7?
  ☐ 1.0 Spec complete

Core Functionality - Logical Forwarding Plane:
  ☐ FIB
    ☐ Address -> egress_interface

Core Functionality - Transport Forwarding Plane:
  ☐ Configure Transports
  
Core Functionality - Transport Forwarding Plane - RabbitMQ:
  ☐ Initial usage of asyncio
  ☐ Select transport instances

Core Functionality - Control Plane Layer 3/4:
  ☐ egress_interface -> header fields 
  ☐ just enough tcp/udp to model a connection (2 unidirectional flows)
    ☐ random_high ports for tcp/udp
    ☐ connection state tracking
      ☐ New sessions outbound
      ☐ New sessions inbound
  ☐ just enough IP to keep track of source/dest addresses, etc.
    ☐ unicast
    ☐ broadcastTOD
    ☐ multicast

Core Functionality - Control Plane:
  ☐ RIB (Routing Information Base - nodes understanding of how to get places)
    ☐ RIB-Manager
      ☐ Intelligently dedupe events, handle null-ops sanely
      ☐ Manage pool of candidate routes
        ☐ Accept routes into pool (on event from protocols)
        ☐ Remove routes from pool (on event from protocols)
        ☐ Select routes for admission to RIB 
          ☐ admin distance
          ☐ filter on interface status (maybe?  probably?)
      ☐ Manage RIB itself
        ☐ Add selected routes
        ☐ rescind de-selected routes
    ☐ Lookups
    
Core Functionality - Protocols - STATIC:
  ☐ Add routes from config
  ☐ rescind routes via config (maybe?)
  ☐ Handle connected routes

Core Functionality - Protocols - RIP: 
  ☐ RIPv2
  ☐ RIPv1 ????

Core Functionality - Management Plane:
  First iteration is the deployment workflow
  Further iteration is low priority until lack of mgmt plane is painful
  ☐ REST API
    ☐ http?
    ☐ via message bus?  maybe? 
  ☐ CLI dependant upon REST API
  ☐ null

Archive:
  ✔ Milestone 2 @done(18-11-27 23:10) @project(Test Functionality - Mock Protocool)
  ✔ which interface? @done(18-11-27 22:49) @project(Test Functionality - Mock Protocool)
  ✔ callback can reference the TransportInstanceCollection @done(18-11-27 22:49) @project(Test Functionality - Mock Protocool)
  ✔ how to timer? @done(18-11-27 22:49) @project(Test Functionality - Mock Protocool)
  ✔ asyncio context manager???? @done(18-11-27 23:09) @project(Test Functionality - Mock Protocool)
  ✔ Milestone 1 @done(18-11-26 18:39) @project(Test Functionality - Mock Protocool)
  ✔ CLI hooks @done(18-11-26 11:47) @project(Test Functionality - Mock Protocool)
  ✔ re-implement rmq_transport based on `aio_pika` @done(18-11-26 11:47) @project(Test Functionality - Mock Protocool)
  ✔ initiator @done(18-11-26 15:51) @project(Test Functionality - Mock Protocool)
  ✔ actor @done(18-11-26 18:39) @project(Test Functionality - Mock Protocool)
  ✔ Monitor and log @done(18-11-26 15:52) @project(Test Functionality - Mock Protocool)
  ✔ discard messages from this interface @done(18-11-26 18:34) @project(Test Functionality - Mock Protocool)
  ✔ topology_config parser first pass @done(18-11-24 17:49) @project(Deployment Workflow)
  ✔ Create transport instance class @done(18-11-24 14:53) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✔ Migrate test RMQ functions to use TransportInstance class @done(18-11-24 17:47) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✔ use enough of the configuration to define which instances get created @done(18-11-24 17:47) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✔ Add concept of networks to test rmq functions @done(18-11-24 17:47) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✘ include sane / consistent defaults @cancelled(18-11-24 17:48) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
  ✔ map logical interfaces to exchanges @done(18-11-24 17:48) @project(Core Functionality - Transport Forwarding Plane - RabbitMQ)
